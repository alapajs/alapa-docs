"use strict";(self.webpackChunkalapa_doc=self.webpackChunkalapa_doc||[]).push([[5302],{5462:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"models/lifecycle","title":"Lifecycle","description":"In alapa, lifecycle hooks (also called listeners) allow you to react to specific events in the lifecycle of an entity\u2014like before it\u2019s saved to the database, after it\u2019s updated, or when it\'s removed.","source":"@site/docs/models/lifecycle.mdx","sourceDirName":"models","slug":"/models/lifecycle","permalink":"/docs/models/lifecycle","draft":false,"unlisted":false,"editUrl":"https://github.com/alapajs/alapa-docs/tree/main/docs/models/lifecycle.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Lifecycle"},"sidebar":"tutorialSidebar","previous":{"title":"Formatted Fields","permalink":"/docs/models/field-controls-and-data-operations/forrmated-fields"},"next":{"title":"Events Subscribers","permalink":"/docs/models/events-subscriber"}}');var s=n(4848),i=n(8453);const o={sidebar_position:3,title:"Lifecycle"},l="Model Lifecycle Hooks",a={},d=[{value:"Available Lifecycle Hooks",id:"available-lifecycle-hooks",level:2},{value:"Examples for Each Hook",id:"examples-for-each-hook",level:2},{value:"<code>@AfterLoad()</code>",id:"afterload",level:3},{value:"<code>@BeforeInsert()</code>",id:"beforeinsert",level:3},{value:"<code>@AfterInsert()</code>",id:"afterinsert",level:3},{value:"<code>@BeforeUpdate()</code>",id:"beforeupdate",level:3},{value:"<code>@AfterUpdate()</code>",id:"afterupdate",level:3},{value:"<code>@BeforeRemove()</code>",id:"beforeremove",level:3},{value:"<code>@AfterRemove()</code>",id:"afterremove",level:3},{value:"Final Notes",id:"final-notes",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{CodeScreen:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeScreen",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"model-lifecycle-hooks",children:"Model Lifecycle Hooks"})}),"\n",(0,s.jsxs)(r.p,{children:["In ",(0,s.jsx)(r.code,{children:"alapa"}),", lifecycle hooks (also called listeners) allow you to react to specific events in the lifecycle of an entity\u2014like before it\u2019s saved to the database, after it\u2019s updated, or when it's removed."]}),"\n",(0,s.jsx)(r.p,{children:"These hooks are decorators that you can place on methods inside your entity models to handle things like data transformations, audit logging, sending emails, or cleaning up resources."}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"available-lifecycle-hooks",children:"Available Lifecycle Hooks"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Hook Decorator"}),(0,s.jsx)(r.th,{children:"Triggered When"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"@AfterLoad()"})}),(0,s.jsx)(r.td,{children:"After the entity is loaded from the database"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"@BeforeInsert()"})}),(0,s.jsx)(r.td,{children:"Right before inserting the entity into the database"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"@AfterInsert()"})}),(0,s.jsx)(r.td,{children:"Immediately after inserting the entity"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"@BeforeUpdate()"})}),(0,s.jsx)(r.td,{children:"Just before updating an existing entity"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"@AfterUpdate()"})}),(0,s.jsx)(r.td,{children:"Right after updating an entity"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"@BeforeRemove()"})}),(0,s.jsx)(r.td,{children:"Before the entity is removed from the database"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"@AfterRemove()"})}),(0,s.jsx)(r.td,{children:"After the entity has been removed"})]})]})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"examples-for-each-hook",children:"Examples for Each Hook"}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"afterload",children:(0,s.jsx)(r.code,{children:"@AfterLoad()"})}),"\n",(0,s.jsx)(r.p,{children:"Called automatically after an entity is loaded from the database. Useful for initializing computed fields."}),"\n",(0,s.jsx)(n,{title:"src/app/models/user.ts",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, Column, AfterLoad } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  fullName: string;\r\n\r\n  @AfterLoad()\r\n  afterLoad() {\r\n    this.fullName = `${this.firstName} ${this.lastName}`;\r\n  }\r\n}\n'})})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"beforeinsert",children:(0,s.jsx)(r.code,{children:"@BeforeInsert()"})}),"\n",(0,s.jsx)(r.p,{children:"Triggered before an entity is inserted. Ideal for modifying or validating data before saving to the database."}),"\n",(0,s.jsx)(n,{title:"src/app/models/user.ts",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, Column, BeforeInsert } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  password: string;\r\n\r\n  @BeforeInsert()\r\n  async encryptPassword() {\r\n    this.password = await HashPassword.encrypt(this.password);\r\n  }\r\n}\n'})})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"afterinsert",children:(0,s.jsx)(r.code,{children:"@AfterInsert()"})}),"\n",(0,s.jsx)(r.p,{children:"Runs after the entity has been successfully inserted into the database. Commonly used for sending welcome emails or notifications."}),"\n",(0,s.jsx)(n,{title:"src/app/models/user.ts",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, Column, AfterInsert } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  email: string;\r\n\r\n  @Column()\r\n  isVerified: boolean;\r\n\r\n  @AfterInsert()\r\n  async sendWelcomeEmail() {\r\n    await EmailService.sendWelcome(this.email);\r\n  }\r\n}\n'})})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"beforeupdate",children:(0,s.jsx)(r.code,{children:"@BeforeUpdate()"})}),"\n",(0,s.jsx)(r.p,{children:"Called just before an entity is updated. Great for change tracking."}),"\n",(0,s.jsx)(n,{title:"src/app/models/user.ts",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, Column, BeforeUpdate } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  role: string;\r\n\r\n  previousRole: string;\r\n\r\n  @BeforeUpdate()\r\n  async trackRoleChange() {\r\n    const existing = await Users.findOne({ where: { id: this.id } });\r\n    if (existing && existing.role !== this.role) {\r\n      this.previousRole = existing.role;\r\n      console.log(\r\n        `User role is being changed from ${existing.role} to ${this.role}`\r\n      );\r\n    }\r\n  }\r\n}\n'})})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"afterupdate",children:(0,s.jsx)(r.code,{children:"@AfterUpdate()"})}),"\n",(0,s.jsx)(r.p,{children:"Triggered immediately after an entity is updated. Perfect for audit logging or notifications."}),"\n",(0,s.jsx)(n,{title:"src/app/models/user.ts",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, Column, AfterUpdate } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  email: string;\r\n\r\n  @AfterUpdate()\r\n  notifyEmailChange() {\r\n    NotificationService.log(`User ${this.id} email updated to ${this.email}`);\r\n  }\r\n}\n'})})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"beforeremove",children:(0,s.jsx)(r.code,{children:"@BeforeRemove()"})}),"\n",(0,s.jsx)(r.p,{children:"Runs before an entity is deleted. Useful for pre-deletion validation or logging."}),"\n",(0,s.jsx)(n,{title:"src/app/models/user.ts",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, Column, BeforeRemove } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  email: string;\r\n\r\n  @BeforeRemove()\r\n  logDeletion() {\r\n    console.log(`Preparing to remove user with email: ${this.email}`);\r\n  }\r\n}\n'})})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"afterremove",children:(0,s.jsx)(r.code,{children:"@AfterRemove()"})}),"\n",(0,s.jsx)(r.p,{children:"Called after an entity is removed. You can use it to perform cleanup tasks such as deleting related files."}),"\n",(0,s.jsx)(n,{title:"src/app/models/user.ts",children:(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, Column, AfterRemove } from "alapa";\r\nimport * as fs from "fs/promises";\r\nimport * as path from "path";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  profilePicture: string;\r\n\r\n  @AfterRemove()\r\n  async deleteProfilePicture() {\r\n    const filePath = path.resolve(\r\n      "uploads/profile-pictures",\r\n      this.profilePicture\r\n    );\r\n    try {\r\n      await fs.unlink(filePath);\r\n      console.log(`Deleted profile picture: ${this.profilePicture}`);\r\n    } catch (error) {\r\n      console.error(`Error deleting profile picture: ${error.message}`);\r\n    }\r\n  }\r\n}\n'})})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"final-notes",children:"Final Notes"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Lifecycle hooks run automatically and can be async."}),"\n",(0,s.jsx)(r.li,{children:"You can mix multiple hooks in a single entity."}),"\n",(0,s.jsx)(r.li,{children:"Always ensure error handling is implemented in hooks that perform I/O operations."}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var t=n(6540);const s={},i=t.createContext(s);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);