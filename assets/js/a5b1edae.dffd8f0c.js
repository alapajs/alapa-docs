"use strict";(self.webpackChunkalapa_doc=self.webpackChunkalapa_doc||[]).push([[855],{2820:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"models/field-controls-and-data-operations/create-and-fill","title":"Create and Fill","description":"This guide introduces how to mass assign data using the create and fill methods in Alapa models.","source":"@site/docs/models/field-controls-and-data-operations/create-and-fill.mdx","sourceDirName":"models/field-controls-and-data-operations","slug":"/models/field-controls-and-data-operations/create-and-fill","permalink":"/docs/models/field-controls-and-data-operations/create-and-fill","draft":false,"unlisted":false,"editUrl":"https://github.com/alapajs/alapa-docs/tree/main/docs/models/field-controls-and-data-operations/create-and-fill.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Create and Fill"},"sidebar":"tutorialSidebar","previous":{"title":"Fillable and Guarded Fields","permalink":"/docs/models/field-controls-and-data-operations/fillable-guards-fields"},"next":{"title":"Include and Exclude Fields","permalink":"/docs/models/field-controls-and-data-operations/includes-and-excludes"}}');var t=r(4848),a=r(8453);const l={sidebar_position:2,title:"Create and Fill"},i=void 0,o={},d=[{value:"<code>Model.create(data)</code>",id:"modelcreatedata",level:2},{value:"<code>Model.fill(data)</code>",id:"modelfilldata",level:2},{value:"<code>Model.isDirty()</code>",id:"modelisdirty",level:2},{value:"<code>Model.isClean()</code>",id:"modelisclean",level:2},{value:"<code>Model.getOriginalValues()</code>",id:"modelgetoriginalvalues",level:2}];function c(e){const s={a:"a",blockquote:"blockquote",code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components},{CodeScreen:r}=s;return r||function(e,s){throw new Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeScreen",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.p,{children:["This guide introduces how to ",(0,t.jsx)(s.strong,{children:"mass assign data"})," using the ",(0,t.jsx)(s.code,{children:"create"})," and ",(0,t.jsx)(s.code,{children:"fill"})," methods in Alapa models."]}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["Before using this feature, ensure you have configured ",(0,t.jsx)(s.a,{href:"/docs/models/field-controls-and-data-operations/fillable-guards-fields",children:"Fillable and Guarded Fields"}),"."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"modelcreatedata",children:(0,t.jsx)(s.code,{children:"Model.create(data)"})}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"create()"})," method allows you to mass assign and persist data to the database immediately."]}),"\n",(0,t.jsx)(r,{title:"src/app/users/router.ts",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'import { Router, Request, Response } from "alapa";\r\nimport { Users } from "../models/user";\r\n\r\nconst userRoutes = new Router();\r\n\r\nuserRoutes.get("/", async (req: Request, res: Response) => {\r\n  const user = new Users();\r\n\r\n  //highlight-start\r\n  await user.create({\r\n    firstName: "John",\r\n    lastName: "Doe",\r\n  });\r\n  //highlight-end\r\n\r\n  console.log(user); // {"id": 1, "firstName": "John", "lastName": "Doe"}\r\n});\n'})})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"modelfilldata",children:(0,t.jsx)(s.code,{children:"Model.fill(data)"})}),"\n",(0,t.jsxs)(s.p,{children:["Use ",(0,t.jsx)(s.code,{children:"fill()"})," to populate model attributes ",(0,t.jsx)(s.strong,{children:"without saving to the database immediately"}),".\r\nThis is especially useful when modifying or combining values before persisting."]}),"\n",(0,t.jsx)(r,{title:"src/app/users/router.ts",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'import { Router, Request, Response } from "alapa";\r\nimport { Users } from "../models/user";\r\n\r\nconst userRoutes = new Router();\r\n\r\nuserRoutes.get("/", async (req: Request, res: Response) => {\r\n  const user = new Users();\r\n\r\n  //highlight-start\r\n  user.fill({\r\n    firstName: "John",\r\n    lastName: "Doe",\r\n  });\r\n  //highlight-end\r\n\r\n  user.secretKey = randomMd5(); // Set additional property\r\n});\n'})})}),"\n",(0,t.jsxs)(s.p,{children:["Alternatively, you can achieve a similar result using ",(0,t.jsx)(s.code,{children:"create()"})," with the ",(0,t.jsx)(s.code,{children:"fillOnly: true"})," option:"]}),"\n",(0,t.jsx)(r,{title:"src/app/users/router.ts",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'import { Router, Request, Response, randomMd5 } from "alapa";\r\nimport { Users } from "../models/user";\r\n\r\nconst userRoutes = new Router();\r\n\r\nuserRoutes.get("/", async (req: Request, res: Response) => {\r\n  const user = new Users();\r\n\r\n  //highlight-start\r\n  user.create(\r\n    {\r\n      firstName: "John",\r\n      lastName: "Doe",\r\n    },\r\n    {\r\n      fillOnly: true,\r\n    }\r\n  );\r\n  //highlight-end\r\n\r\n  user.secretKey = randomMd5();\r\n\r\n  await user.save();\r\n});\n'})})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"modelisdirty",children:(0,t.jsx)(s.code,{children:"Model.isDirty()"})}),"\n",(0,t.jsx)(s.p,{children:"Checks whether any model attributes have changed since they were loaded from the database."}),"\n",(0,t.jsx)(r,{title:"src/app/users/router.ts",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'const user = new Users();\r\nuser.lastName = "smith";\r\n\r\nuser.isDirty(); // true\r\nuser.isDirty("lastName"); // true\r\nuser.isDirty(["firstName", "lastName"]); // true\r\nuser.isDirty("firstName"); // false\n'})})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"modelisclean",children:(0,t.jsx)(s.code,{children:"Model.isClean()"})}),"\n",(0,t.jsx)(s.p,{children:"Checks whether the model (or specific fields) remain unchanged since the last sync with the database."}),"\n",(0,t.jsx)(r,{title:"src/app/users/router.ts",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'const user = new Users();\r\nuser.lastName = "smith";\r\n\r\nuser.isClean(); // false\r\nuser.isClean("lastName"); // false\r\nuser.isClean(["firstName", "lastName"]); // false\r\nuser.isClean("firstName"); // true\n'})})}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"modelgetoriginalvalues",children:(0,t.jsx)(s.code,{children:"Model.getOriginalValues()"})}),"\n",(0,t.jsx)(s.p,{children:"Returns the original values of the model before any changes were made."}),"\n",(0,t.jsx)(r,{title:"src/app/users/router.ts",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-typescript",children:'const user = new Users();\r\nuser.lastName = "smith";\r\n\r\nuser.getOriginalValues(); // { "id": 1, "firstName": "John", "lastName": "Doe" }\r\nuser.getOriginalValues("lastName"); // "Doe"\r\nuser.getOriginalValues(["lastName", "firstName"]); // { "firstName": "John", "lastName": "Doe" }\n'})})})]})}function u(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,s,r)=>{r.d(s,{R:()=>l,x:()=>i});var n=r(6540);const t={},a=n.createContext(t);function l(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);