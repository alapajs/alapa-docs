"use strict";(self.webpackChunkalapa_doc=self.webpackChunkalapa_doc||[]).push([[3733],{177:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"model/relation/getting-started","title":"Getting Started","description":"What are relations?","source":"@site/docs/model/relation/getting-started.mdx","sourceDirName":"model/relation","slug":"/model/relation/getting-started","permalink":"/alapa-docs/docs/model/relation/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/alapajs/alapa-doc/tree/main/docs/model/relation/getting-started.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Getting Started"},"sidebar":"tutorialSidebar","previous":{"title":"Models","permalink":"/alapa-docs/docs/model/getting-started"},"next":{"title":"Model Relationship","permalink":"/alapa-docs/docs/model/relation/inde-old"}}');var t=o(4848),a=o(8453);const s={sidebar_position:1,title:"Getting Started"},i=void 0,l={},c=[{value:"What are relations?",id:"what-are-relations",level:2},{value:"Relation options",id:"relation-options",level:2},{value:"Cascades",id:"cascades",level:2},{value:"Cascade Options",id:"cascade-options",level:3},{value:"<code>@JoinColumn</code> Options",id:"joincolumn-options",level:2},{value:"<code>@JoinTable</code> Options",id:"jointable-options",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"what-are-relations",children:"What are relations?"}),"\n",(0,t.jsx)(n.p,{children:"Relations help you work with related models easily. There are several types of relations:"}),"\n",(0,t.jsx)(n.h2,{id:"relation-options",children:"Relation options"}),"\n",(0,t.jsx)(n.p,{children:"Several options can be specified for relations:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"eager: boolean"})," - If set to true, the relation will always be loaded with the main model when using ",(0,t.jsx)(n.code,{children:"find*"})," methods or ",(0,t.jsx)(n.code,{children:"QueryBuilder"})," on this model."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'cascade: boolean | ("insert" | "update")[]'})," - If set to true, the related object will be inserted and updated in the database. You can also specify an array of ",(0,t.jsx)(n.a,{href:"#cascade-options",children:"cascade options"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'onDelete: "RESTRICT"|"CASCADE"|"SET NULL"'})," - Specifies how the foreign key should behave when the referenced object is deleted."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"nullable: boolean"})," - Indicates whether this relation's column is nullable or not. By default, it is nullable."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:'orphanedRowAction: "nullify" | "delete" | "soft-delete" | "disable"'})," - Controls what happens to child rows in the database when the parent is saved (with cascading enabled) but no longer contains the child rows. Options include:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"delete"}),": Removes these child rows from the database."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"soft-delete"}),": Marks child rows as soft-deleted."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"nullify"}),": Removes the relation key."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"disable"}),": Keeps the relation intact, requiring manual repository use for deletion."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"cascades",children:"Cascades"}),"\n",(0,t.jsx)(n.p,{children:"Cascades example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { Model, PrimaryKeyColumn, Column, ManyToMany } from "alapa";\r\nimport { Question } from "./Question";\r\n\r\n@Model()\r\nexport class Category {\r\n  @PrimaryKeyColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  name: string;\r\n\r\n  @ManyToMany((type) => Question, (question) => question.categories)\r\n  questions: Question[];\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { Model, PrimaryKeyColumn, Column, ManyToMany, JoinTable } from "alapa";\r\nimport { Category } from "./Category";\r\n\r\n@Model()\r\nexport class Question {\r\n  @PrimaryKeyColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  title: string;\r\n\r\n  @Column()\r\n  text: string;\r\n\r\n  @ManyToMany((type) => Category, (category) => category.questions, {\r\n    cascade: true,\r\n  })\r\n  @JoinTable()\r\n  categories: Category[];\r\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'const category1 = new Category();\r\ncategory1.name = "ORMs";\r\n\r\nconst category2 = new Category();\r\ncategory2.name = "Programming";\r\n\r\nconst question = new Question();\r\nquestion.title = "How to ask questions?";\r\nquestion.text = "Where can I ask ORM-related questions?";\r\nquestion.categories = [category1, category2];\r\nawait dataSource.manager.save(question);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, ",(0,t.jsx)(n.code,{children:"category1"})," and ",(0,t.jsx)(n.code,{children:"category2"})," are automatically inserted because we set ",(0,t.jsx)(n.code,{children:"cascade"})," to true."]}),"\n",(0,t.jsx)(n.h3,{id:"cascade-options",children:"Cascade Options"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"cascade"})," option can be set as a ",(0,t.jsx)(n.code,{children:"boolean"})," or an array of cascade options (",(0,t.jsx)(n.code,{children:'"insert" | "update" | "remove" | "soft-remove" | "recover"'}),")[]"]}),"\n",(0,t.jsx)(n.p,{children:"For example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'@Model(Post)\r\nexport class Post {\r\n  @PrimaryKeyColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  title: string;\r\n\r\n  @Column()\r\n  text: string;\r\n\r\n  @ManyToMany((type) => PostCategory, { cascade: true })\r\n  @JoinTable()\r\n  categories: PostCategory[];\r\n\r\n  @ManyToMany((type) => PostDetails, (details) => details.posts, {\r\n    cascade: ["insert"],\r\n  })\r\n  @JoinTable()\r\n  details: PostDetails[];\r\n\r\n  @ManyToMany((type) => PostImage, (image) => image.posts, {\r\n    cascade: ["update"],\r\n  })\r\n  @JoinTable()\r\n  images: PostImage[];\r\n\r\n  @ManyToMany((type) => PostInformation, (information) => information.posts, {\r\n    cascade: ["insert", "update"],\r\n  })\r\n  @JoinTable()\r\n  informations: PostInformation[];\r\n}\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"joincolumn-options",children:[(0,t.jsx)(n.code,{children:"@JoinColumn"})," Options"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"@JoinColumn"})," defines which side of the relation contains the join column with a foreign key and allows customizing column names."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@ManyToOne((type) => Category)\r\n@JoinColumn()\r\ncategory: Category;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This creates a ",(0,t.jsx)(n.code,{children:"categoryId"})," column. To customize the name:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'@ManyToOne((type) => Category)\r\n@JoinColumn({ name: "cat_id" })\r\ncategory: Category;\n'})}),"\n",(0,t.jsx)(n.p,{children:"To reference a column other than the primary column:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'@ManyToOne((type) => Category)\r\n@JoinColumn({ referencedColumnName: "name" })\r\ncategory: Category;\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"jointable-options",children:[(0,t.jsx)(n.code,{children:"@JoinTable"})," Options"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"@JoinTable"})," is used for ",(0,t.jsx)(n.code,{children:"many-to-many"})," relations and describes the join columns in the junction table. You can customize column names and the table name:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'@ManyToMany((type) => Category)\r\n@JoinTable({\r\n  name: "question_categories",\r\n  joinColumn: {\r\n    name: "question",\r\n    referencedColumnName: "id",\r\n  },\r\n  inverseJoinColumn: {\r\n    name: "category",\r\n    referencedColumnName: "id",\r\n  },\r\n})\r\ncategories: Category[];\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If the destination table has composite primary keys, specify an array of properties in ",(0,t.jsx)(n.code,{children:"@JoinTable"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>i});var r=o(6540);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);