"use strict";(self.webpackChunkalapa_doc=self.webpackChunkalapa_doc||[]).push([[3355],{5160:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"template/containter","title":"Containers","description":"Alapa Containers are a powerful feature designed to help you organize and inject scripts, styles, or custom HTML content throughout your application. With Containers, you can write scripts, styles, or custom HTML anywhere in your code and render them in a single location (e.g., scripts at the footer, styles in the head). This approach provides unparalleled flexibility in managing your page structure and content rendering, making your codebase cleaner, more modular, and easier to maintain.","source":"@site/docs/template/containter.mdx","sourceDirName":"template","slug":"/template/containter","permalink":"/docs/template/containter","draft":false,"unlisted":false,"editUrl":"https://github.com/alapajs/alapa-docs/tree/main/docs/template/containter.mdx","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Containers"},"sidebar":"tutorialSidebar","previous":{"title":"Importing Components","permalink":"/docs/template/component/import"},"next":{"title":"Authentication","permalink":"/docs/security/login"}}');var o=t(4848),s=t(8453);const i={sidebar_position:8,title:"Containers"},a="Containers in Alapa",c={},l=[{value:"How Containers Work",id:"how-containers-work",level:2},{value:"Push Component",id:"push-component",level:3},{value:"Example: Pushing Scripts, Styles, and Custom HTML",id:"example-pushing-scripts-styles-and-custom-html",level:4},{value:"Stack Component",id:"stack-component",level:3},{value:"Example: Rendering Pushed Content",id:"example-rendering-pushed-content",level:4},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{BrowserWindow:t,CodeScreen:r}=n;return t||p("BrowserWindow",!0),r||p("CodeScreen",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"containers-in-alapa",children:"Containers in Alapa"})}),"\n",(0,o.jsx)(n.p,{children:"Alapa Containers are a powerful feature designed to help you organize and inject scripts, styles, or custom HTML content throughout your application. With Containers, you can write scripts, styles, or custom HTML anywhere in your code and render them in a single location (e.g., scripts at the footer, styles in the head). This approach provides unparalleled flexibility in managing your page structure and content rendering, making your codebase cleaner, more modular, and easier to maintain."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"how-containers-work",children:"How Containers Work"}),"\n",(0,o.jsxs)(n.p,{children:["Alapa Containers rely on two core components: ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Push"})})," and ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Stack"})}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Push"})}),": Defines and stores content (scripts, styles, or custom HTML) for later use."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Stack"})}),": Renders the pushed content in a specific location."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Together, these components allow you to write content in one place and render it in another, giving you full control over your application's structure."}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"push-component",children:"Push Component"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Push"}),' component is designed to "push" content\u2014like JavaScript, CSS, or custom HTML\u2014to specific locations in your code. It is highly flexible, allowing you to define custom names for different types of content.']}),"\n",(0,o.jsx)(n.h4,{id:"example-pushing-scripts-styles-and-custom-html",children:"Example: Pushing Scripts, Styles, and Custom HTML"}),"\n",(0,o.jsxs)(n.p,{children:["In this example, we use the ",(0,o.jsx)(n.code,{children:"Push"})," component to define a script, inline styles, and custom HTML content. These will be rendered later using the ",(0,o.jsx)(n.code,{children:"Stack"})," component."]}),"\n",(0,o.jsx)(r,{title:"views/index.html",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'{% import Wrapper from \'/components/wrapper.html\' %}\r\n\r\n<X:Wrapper>\r\n  <Push script>\r\n    <script>\r\n      console.log("Hello, world!");\r\n    <\/script>\r\n  </Push>\r\n\r\n  <Push style>\r\n    <style>\r\n      .alert {\r\n        background-color: #f44336;\r\n        color: white;\r\n      }\r\n    </style>\r\n  </Push>\r\n\r\n  <Push customContent>\r\n    <div class="alert">This is a custom HTML alert message!</div>\r\n  </Push>\r\n\r\n</X:Wrapper>\n'})})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"stack-component",children:"Stack Component"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Stack"})," component is used to render content that has been pushed using the ",(0,o.jsx)(n.code,{children:"Push"})," component. It ensures that your content is injected exactly where you need it, whether it's in the ",(0,o.jsx)(n.code,{children:"<head>"}),", ",(0,o.jsx)(n.code,{children:"<body>"}),", or even the footer of your page."]}),"\n",(0,o.jsx)(n.h4,{id:"example-rendering-pushed-content",children:"Example: Rendering Pushed Content"}),"\n",(0,o.jsx)(r,{title:"views/components/wrapper.html",children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<component default Wrapper>\r\n  <!DOCTYPE html>\r\n  <html lang="en">\r\n    <head>\r\n      <Stack style />\r\n    </head>\r\n\r\n    <body>\r\n      <Stack customContent />\r\n    </body>\r\n\r\n    <Stack script />\r\n  </html>\r\n</component>\n'})})}),"\n",(0,o.jsxs)(n.p,{children:["The following HTML is rendered by the ",(0,o.jsx)(n.code,{children:"Stack"})," component based on the content pushed earlier:"]}),"\n",(0,o.jsx)(t,{src:!0,children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    <style>\r\n      .alert {\r\n        background-color: #f44336;\r\n        color: white;\r\n      }\r\n    </style>\r\n  </head>\r\n\r\n  <body>\r\n    <div class="alert">This is a custom HTML alert message!</div>\r\n  </body>\r\n\r\n  <script>\r\n    console.log("Hello, world!");\r\n  <\/script>\r\n</html>\n'})})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(n.p,{children:"Alapa Containers provide a robust and flexible system for managing and injecting content throughout your application. Key features include:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Flexibility in Content Injection"}),": Write scripts, styles, or HTML anywhere and render them in a single location."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Dynamic Content Rendering"}),": Use ",(0,o.jsx)(n.code,{children:"Stack"})," to render pushed content dynamically, ensuring precise control over placement."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Customizable and Extendable"}),": Define custom block names and extend functionality for advanced use cases."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Ready to streamline your code with Alapa Containers? Start using ",(0,o.jsx)(n.code,{children:"Push"})," and ",(0,o.jsx)(n.code,{children:"Stack"})," today to organize and inject content with ease!"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);