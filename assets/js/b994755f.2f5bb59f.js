"use strict";(self.webpackChunkalapa_doc=self.webpackChunkalapa_doc||[]).push([[7518],{347:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"model/getting-started","title":"Models","description":"What is a Model?","source":"@site/docs/model/getting-started.mdx","sourceDirName":"model","slug":"/model/getting-started","permalink":"/alapa-docs/docs/model/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/alapajs/alapa-doc/tree/main/docs/model/getting-started.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Models"},"sidebar":"tutorialSidebar","previous":{"title":"Controller-Based Routing","permalink":"/alapa-docs/docs/routing/controller"},"next":{"title":"Getting Started","permalink":"/alapa-docs/docs/model/relation/getting-started"}}');var l=r(4848),a=r(8453);const i={sidebar_position:1,title:"Models"},t="Models",o={},c=[{value:"What is a Model?",id:"what-is-a-model",level:2},{value:"Model columns",id:"model-columns",level:2},{value:"Primary columns",id:"primary-columns",level:3},{value:"Special columns",id:"special-columns",level:3},{value:"Spatial columns",id:"spatial-columns",level:3},{value:"<code>set</code> column type",id:"set-column-type",level:3},{value:"<code>simple-array</code> column type",id:"simple-array-column-type",level:3},{value:"<code>simple-json</code> column type",id:"simple-json-column-type",level:3},{value:"Columns with generated values",id:"columns-with-generated-values",level:3},{value:"Column options",id:"column-options",level:2},{value:"Entity inheritance",id:"entity-inheritance",level:2},{value:"Tree entities",id:"tree-entities",level:2},{value:"Adjacency list",id:"adjacency-list",level:3},{value:"Closure table",id:"closure-table",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"models",children:"Models"})}),"\n",(0,l.jsx)(n.h2,{id:"what-is-a-model",children:"What is a Model?"}),"\n",(0,l.jsxs)(n.p,{children:["A Model is a class that maps to a database table (or collection when using MongoDB). You can create a Model by defining a new class and marking it with ",(0,l.jsx)(n.code,{children:"@Model()"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, Column } from "alapa";\r\n\r\n@Model()\r\nexport class User extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @Column()\r\n  isActive: boolean;\r\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"This will create the following database table:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"+-------------+--------------+----------------------------+\r\n|                          user                           |\r\n+-------------+--------------+----------------------------+\r\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\r\n| firstName   | varchar(255) |                            |\r\n| lastName    | varchar(255) |                            |\r\n| isActive    | boolean      |                            |\r\n+-------------+--------------+----------------------------+\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Basic Models consist of columns and relations. Each Model ",(0,l.jsx)(n.strong,{children:"MUST"})," have a primary column (or ObjectId column if using MongoDB)."]}),"\n",(0,l.jsx)(n.p,{children:"Each Model must be registered in your data source options:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'import { DataSource } from "alapa";\r\nimport { User } from "./model/User";\r\n\r\nconst myDataSource = new DataSource({\r\n  type: "mysql",\r\n  host: "localhost",\r\n  port: 3306,\r\n  username: "test",\r\n  password: "test",\r\n  database: "test",\r\n  models: [User],\r\n});\n'})}),"\n",(0,l.jsx)(n.p,{children:"Or you can specify the whole directory with all Models inside - and all of them will be loaded:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'import { DataSource } from "alapa";\r\n\r\nconst dataSource = new DataSource({\r\n  type: "mysql",\r\n  host: "localhost",\r\n  port: 3306,\r\n  username: "test",\r\n  password: "test",\r\n  database: "test",\r\n  models: ["model/*.js"],\r\n});\n'})}),"\n",(0,l.jsxs)(n.p,{children:["If you want to use an alternative table name for the ",(0,l.jsx)(n.code,{children:"User"})," Model, you can specify it in ",(0,l.jsx)(n.code,{children:"@Model"}),": ",(0,l.jsx)(n.code,{children:'@Model("my_users")'}),". If you want to set a base prefix for all database tables in your application, you can specify ",(0,l.jsx)(n.code,{children:"modelPrefix"})," in data source options."]}),"\n",(0,l.jsxs)(n.p,{children:["When using a Model constructor, its arguments ",(0,l.jsx)(n.strong,{children:"must be optional"}),". Since ORM creates instances of Model classes when loading from the database, it is not aware of your constructor arguments."]}),"\n",(0,l.jsxs)(n.p,{children:["Learn more about parameters ",(0,l.jsx)(n.code,{children:"@Model"})," in ",(0,l.jsx)(n.a,{href:"#",children:"Decorators reference"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"model-columns",children:"Model columns"}),"\n",(0,l.jsxs)(n.p,{children:["Since database tables consist of columns, your Models must consist of columns too. Each Model class property you mark with ",(0,l.jsx)(n.code,{children:"@Column"})," will be mapped to a database table column."]}),"\n",(0,l.jsx)(n.h3,{id:"primary-columns",children:"Primary columns"}),"\n",(0,l.jsx)(n.p,{children:"Each Model must have at least one primary column. There are several types of primary columns:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"@PrimaryColumn()"})," creates a primary column that takes any value of any type. You can specify the column type. If you don't specify a column type, it will be inferred from the property type. The example below will create ",(0,l.jsx)(n.code,{children:"id"})," with ",(0,l.jsx)(n.code,{children:"int"})," as the type, which you must manually assign before saving:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'import { Model, bTableModel, PrimaryColumn } from "alapa";\r\n\r\n@TableModel()\r\nexport class User extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n}\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"@PrimaryColumn()"})," creates a primary column whose value will be automatically generated with an auto-increment value. It will create an ",(0,l.jsx)(n.code,{children:"int"})," column with ",(0,l.jsx)(n.code,{children:"auto-increment"}),"/",(0,l.jsx)(n.code,{children:"serial"}),"/",(0,l.jsx)(n.code,{children:"sequence"}),"/",(0,l.jsx)(n.code,{children:"identity"})," (depending on the database and configuration provided). You don't have to manually assign its value before saving - the value will be automatically generated:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, TableModel } from "alapa";\r\n\r\n@TableModel()\r\nexport class User extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n}\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:'@PrimaryColumn("uuid")'})," creates a primary column whose value will be automatically generated with ",(0,l.jsx)(n.code,{children:"uuid"}),". Uuid is a unique string id. You don't have to manually assign its value before saving - the value will be automatically generated:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, TableModel } from "alapa";\r\n\r\n@TableModel()\r\nexport class User extends Model {\r\n  @PrimaryColumn("uuid")\r\n  id: string;\r\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:"You can have composite primary columns as well:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'import { Model, PrimaryColumn } from "alapa";\r\n\r\n@Model()\r\nexport class User {\r\n  @PrimaryColumn()\r\n  firstName: string;\r\n\r\n  @PrimaryColumn()\r\n  lastName: string;\r\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["When you save Models using ",(0,l.jsx)(n.code,{children:"save"}),", it always tries to find a record in the database with the given Model id (or ids). If id/ids are found, it will update this row in the database. If there is no row with the id/ids, a new row will be inserted."]}),"\n",(0,l.jsxs)(n.p,{children:["To find a Model by id, you can use ",(0,l.jsx)(n.code,{children:"manager.findOneBy"})," or ",(0,l.jsx)(n.code,{children:"repository.findOneBy"}),". Example:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'// Find one by id with a single primary key\r\nconst person = await dataSource.manager.findOneBy(Person, { id: 1 });\r\nconst person = await dataSource.getRepository(Person).findOneBy({ id: 1 });\r\n\r\n// Find one by id with composite primary keys\r\nconst user = await dataSource.manager.findOneBy(User, {\r\n  firstName: "Timber",\r\n  lastName: "Saw",\r\n});\r\nconst user = await dataSource.getRepository(User).findOneBy({\r\n  firstName: "Timber",\r\n  lastName: "Saw",\r\n});\n'})}),"\n",(0,l.jsx)(n.h3,{id:"special-columns",children:"Special columns"}),"\n",(0,l.jsx)(n.p,{children:"There are several special column types with additional functionality available:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"@CreateDateColumn"})," is a special column that is automatically set to the Model's insertion date. You don't need to set this column - it will be automatically set."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"@UpdateDateColumn"})," is a special column that is automatically set to the Model's update time each time you call ",(0,l.jsx)(n.code,{children:"save"})," on the manager or repository. You don't need to set this column - it will be automatically set."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"@DeleteDateColumn"})," is a special column that is automatically set to the Model's delete time each time you call soft-delete on the manager or repository. You don't need to set this column - it will be automatically set. If the @DeleteDateColumn is set, the default scope will be \"non-deleted\"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"@VersionColumn"})," is a special column that is automatically set to the version of the Model (incremental number) each time you call ",(0,l.jsx)(n.code,{children:"save"})," on the manager or repository. You don't need to set this column - it will be automatically set."]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"spatial-columns",children:"Spatial columns"}),"\n",(0,l.jsx)(n.p,{children:"MS SQL, MySQL, MariaDB, PostgreSQL, and CockroachDB all support spatial columns. Alapa's support for each varies slightly between databases, particularly as the column names vary between databases."}),"\n",(0,l.jsx)(n.p,{children:"For full implementation examples and other column type details, refer to the official documentation."}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"Note: String, numeric and heterogeneous enums are supported."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Using array with enum values:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'export type UserRoleType = "admin" | "editor" | "ghost",\r\n\r\n@Model\r\nexport class User {\r\n\r\n    @PrimaryColumn()\r\n    id: number;\r\n\r\n    @Column({\r\n        type: "enum",\r\n        enum: ["admin", "editor", "ghost"],\r\n        default: "ghost"\r\n    })\r\n    role: UserRoleType\r\n}\n'})}),"\n",(0,l.jsxs)(n.h3,{id:"set-column-type",children:[(0,l.jsx)(n.code,{children:"set"})," column type"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"set"})," column type is supported by ",(0,l.jsx)(n.code,{children:"mariadb"})," and ",(0,l.jsx)(n.code,{children:"mysql"}),". There are various possible column definitions:"]}),"\n",(0,l.jsx)(n.p,{children:"Using typescript enums:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'export enum UserRole {\r\n  ADMIN = "admin",\r\n  EDITOR = "editor",\r\n  GHOST = "ghost",\r\n}\r\n\r\n@Model\r\nexport class User {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column({\r\n    type: "set",\r\n    enum: UserRole,\r\n    default: [UserRole.GHOST, UserRole.EDITOR],\r\n  })\r\n  roles: UserRole[];\r\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Using array with ",(0,l.jsx)(n.code,{children:"set"})," values:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'export type UserRoleType = "admin" | "editor" | "ghost",\r\n\r\n@Model\r\nexport class User {\r\n\r\n    @PrimaryColumn()\r\n    id: number;\r\n\r\n    @Column({\r\n        type: "set",\r\n        enum: ["admin", "editor", "ghost"],\r\n        default: ["ghost", "editor"]\r\n    })\r\n    roles: UserRoleType[]\r\n}\n'})}),"\n",(0,l.jsxs)(n.h3,{id:"simple-array-column-type",children:[(0,l.jsx)(n.code,{children:"simple-array"})," column type"]}),"\n",(0,l.jsxs)(n.p,{children:["There is a special column type called ",(0,l.jsx)(n.code,{children:"simple-array"})," which can store primitive array values in a single string column.\r\nAll values are separated by a comma. For example:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'@Model\r\nexport class User {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column("simple-array")\r\n  names: string[];\r\n}\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'const user = new User();\r\nuser.names = ["Alexander", "Alex", "Sasha", "Shurik"];\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Will be stored in a single database column as ",(0,l.jsx)(n.code,{children:"Alexander,Alex,Sasha,Shurik"})," value.\r\nWhen you'll load data from the database, the names will be returned as an array of names,\r\njust like you stored them."]}),"\n",(0,l.jsxs)(n.p,{children:["Note you ",(0,l.jsx)(n.strong,{children:"MUST NOT"})," have any comma in values you write."]}),"\n",(0,l.jsxs)(n.h3,{id:"simple-json-column-type",children:[(0,l.jsx)(n.code,{children:"simple-json"})," column type"]}),"\n",(0,l.jsxs)(n.p,{children:["There is a special column type called ",(0,l.jsx)(n.code,{children:"simple-json"})," which can store any values which can be stored in database\r\nvia JSON.stringify.\r\nVery useful when you do not have json type in your database and you want to store and load object\r\nwithout any hassle.\r\nFor example:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'@Model\r\nexport class User {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column("simple-json")\r\n  profile: { name: string; nickname: string };\r\n}\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'const user = new User();\r\nuser.profile = { name: "John", nickname: "Malkovich" };\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Will be stored in a single database column as ",(0,l.jsx)(n.code,{children:'{"name":"John","nickname":"Malkovich"}'})," value.\r\nWhen you'll load data from the database, you will have your object/array/primitive back via JSON.parse"]}),"\n",(0,l.jsx)(n.h3,{id:"columns-with-generated-values",children:"Columns with generated values"}),"\n",(0,l.jsxs)(n.p,{children:["You can create column with generated value using ",(0,l.jsx)(n.code,{children:"@Generated"})," decorator. For example:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'@Model\r\nexport class User {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  @Generated("uuid")\r\n  uuid: string;\r\n}\n'})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"uuid"})," value will be automatically generated and stored into the database."]}),"\n",(0,l.jsx)(n.p,{children:'Besides "uuid" there is also "increment", "identity" (Postgres 10+ only) and "rowid" (CockroachDB only) generated types, however there are some limitations\r\non some database platforms with this type of generation (for example some databases can only have one increment column,\r\nor some of them require increment to be a primary key).'}),"\n",(0,l.jsx)(n.h2,{id:"column-options",children:"Column options"}),"\n",(0,l.jsxs)(n.p,{children:["Column options defines additional options for your entity columns.\r\nYou can specify column options on ",(0,l.jsx)(n.code,{children:"@Column"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'@Column({\r\n    type: "varchar",\r\n    length: 150,\r\n    unique: true,\r\n    // ...\r\n})\r\nname: string;\n'})}),"\n",(0,l.jsxs)(n.p,{children:["List of available options in ",(0,l.jsx)(n.code,{children:"ColumnOptions"}),":"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"type: ColumnType"})," - Column type. One of the type listed ",(0,l.jsx)(n.a,{href:"#column-types",children:"above"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"name: string"})," - Column name in the database table.\r\nBy default the column name is generated from the name of the property.\r\nYou can change it by specifying your own name."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"length: number"})," - Column type's length. For example if you want to create ",(0,l.jsx)(n.code,{children:"varchar(150)"})," type you specify column type and length options."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"width: number"})," - column type's display width. Used only for ",(0,l.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/5.7/en/integer-types.html",children:"MySQL integer types"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"onUpdate: string"})," - ",(0,l.jsx)(n.code,{children:"ON UPDATE"})," trigger. Used only in ",(0,l.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html",children:"MySQL"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"nullable: boolean"})," - Makes column ",(0,l.jsx)(n.code,{children:"NULL"})," or ",(0,l.jsx)(n.code,{children:"NOT NULL"})," in the database. By default column is ",(0,l.jsx)(n.code,{children:"nullable: false"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"update: boolean"}),' - Indicates if column value is updated by "save" operation. If false, you\'ll be able to write this value only when you first time insert the object. Default value is ',(0,l.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"insert: boolean"})," - Indicates if column value is set the first time you insert the object. Default value is ",(0,l.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"select: boolean"})," - Defines whether or not to hide this column by default when making queries. When set to ",(0,l.jsx)(n.code,{children:"false"}),", the column data will not show with a standard query. By default column is ",(0,l.jsx)(n.code,{children:"select: true"})]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"default: string"})," - Adds database-level column's ",(0,l.jsx)(n.code,{children:"DEFAULT"})," value."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"primary: boolean"})," - Marks column as primary. Same if you use ",(0,l.jsx)(n.code,{children:"@PrimaryColumn"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unique: boolean"})," - Marks column as unique column (creates unique constraint)."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"comment: string"})," - Database's column comment. Not supported by all database types."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"precision: number"})," - The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\r\nnumber of digits that are stored for the values. Used in some column types."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"scale: number"})," - The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number of digits to the right of the decimal point and must not be greater than precision. Used in some column types."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"zerofill: boolean"})," - Puts ",(0,l.jsx)(n.code,{children:"ZEROFILL"})," attribute on to a numeric column. Used only in MySQL. If ",(0,l.jsx)(n.code,{children:"true"}),", MySQL automatically adds the ",(0,l.jsx)(n.code,{children:"UNSIGNED"})," attribute to this column."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"unsigned: boolean"})," - Puts ",(0,l.jsx)(n.code,{children:"UNSIGNED"})," attribute on to a numeric column. Used only in MySQL."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"charset: string"})," - Defines a column character set. Not supported by all database types."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"collation: string"})," - Defines a column collation."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"enum: string[]|AnyEnum"})," - Used in ",(0,l.jsx)(n.code,{children:"enum"})," column type to specify list of allowed enum values. You can specify array of values or specify a enum class."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"enumName: string"})," - Defines the name for the used enum."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"asExpression: string"})," - Generated column expression. Used only in ",(0,l.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/5.7/en/create-table-generated-columns.html",children:"MySQL"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'generatedType: "VIRTUAL"|"STORED"'})," - Generated column type. Used only in ",(0,l.jsx)(n.a,{href:"https://dev.mysql.com/doc/refman/5.7/en/create-table-generated-columns.html",children:"MySQL"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:'hstoreType: "object"|"string"'})," - Return type of ",(0,l.jsx)(n.code,{children:"HSTORE"})," column. Returns value as string or as object. Used only in ",(0,l.jsx)(n.a,{href:"https://www.postgresql.org/docs/9.6/static/hstore.html",children:"Postgres"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"array: boolean"})," - Used for postgres and cockroachdb column types which can be array (for example int[])"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"transformer: { from(value: DatabaseType): EntityType, to(value: EntityType): DatabaseType }"})," - Used to marshal properties of arbitrary type ",(0,l.jsx)(n.code,{children:"EntityType"})," into a type ",(0,l.jsx)(n.code,{children:"DatabaseType"})," supported by the database. Array of transformers are also supported and will be applied in natural order when writing, and in reverse order when reading. e.g. ",(0,l.jsx)(n.code,{children:"[lowercase, encrypt]"})," will first lowercase the string then encrypt it when writing, and will decrypt then do nothing when reading."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Note: most of those column options are RDBMS-specific and aren't available in ",(0,l.jsx)(n.code,{children:"MongoDB"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"entity-inheritance",children:"Entity inheritance"}),"\n",(0,l.jsx)(n.p,{children:"You can reduce duplication in your code by using entity inheritance."}),"\n",(0,l.jsxs)(n.p,{children:["For example, you have ",(0,l.jsx)(n.code,{children:"Photo"}),", ",(0,l.jsx)(n.code,{children:"Question"}),", ",(0,l.jsx)(n.code,{children:"Post"})," entities:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"@Model\r\nexport class Photo {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  title: string;\r\n\r\n  @Column()\r\n  description: string;\r\n\r\n  @Column()\r\n  size: string;\r\n}\r\n\r\n@Model\r\nexport class Question {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  title: string;\r\n\r\n  @Column()\r\n  description: string;\r\n\r\n  @Column()\r\n  answersCount: number;\r\n}\r\n\r\n@TableModel()\r\nexport class Poste extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  title: string;\r\n\r\n  @Column()\r\n  description: string;\r\n\r\n  @Column()\r\n  viewCount: number;\r\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["As you can see all those entities have common columns: ",(0,l.jsx)(n.code,{children:"id"}),", ",(0,l.jsx)(n.code,{children:"title"}),", ",(0,l.jsx)(n.code,{children:"description"}),". To reduce duplication and produce a better abstraction we can create a base class called ",(0,l.jsx)(n.code,{children:"Content"})," for them:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"export abstract class Content extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  title: string;\r\n\r\n  @Column()\r\n  description: string;\r\n}\r\n\r\n@TableModel()\r\nexport class Photo extends Content {\r\n  @Column()\r\n  size: string;\r\n}\r\n\r\n@TableModel()\r\nexport class Question extends Content {\r\n  @Column()\r\n  answersCount: number;\r\n}\r\n\r\n@TableModel()\r\nexport class Post extends Content {\r\n  @Column()\r\n  viewCount: number;\r\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"All columns (relations, embeds, etc.) from parent entities (parent can extend other entity as well)\r\nwill be inherited and created in final entities."}),"\n",(0,l.jsx)(n.h2,{id:"tree-entities",children:"Tree entities"}),"\n",(0,l.jsx)(n.p,{children:"alapa supports the Adjacency list and Closure table patterns of storing tree structures."}),"\n",(0,l.jsx)(n.h3,{id:"adjacency-list",children:"Adjacency list"}),"\n",(0,l.jsx)(n.p,{children:"Adjacency list is a simple model with self-referencing.\r\nBenefit of this approach is simplicity,\r\ndrawback is you can't load a big tree at once because of join limitations.\r\nExample:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'import { Entity, Column, PrimaryColumn, ManyToOne, OneToMany } from "alapa";\r\n\r\n@TableModel()\r\nexport class Category extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  name: string;\r\n\r\n  @Column()\r\n  description: string;\r\n\r\n  @ManyToOne((type) => Category, (category) => category.children)\r\n  parent: Category;\r\n\r\n  @OneToMany((type) => Category, (category) => category.parent)\r\n  children: Category[];\r\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"closure-table",children:"Closure table"}),"\n",(0,l.jsxs)(n.p,{children:["A closure table stores relations between parent and child in a separate table in a special way.\r\nIts efficient in both reads and writes.\r\nTo learn more about closure table take a look at ",(0,l.jsx)(n.a,{href:"https://www.slideshare.net/billkarwin/models-for-hierarchical-data",children:"this awesome presentation by Bill Karwin"}),".\r\nExample:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'import {\r\n  Model,\r\n  Tree,\r\n  Column,\r\n  PrimaryColumn,\r\n  TreeChildren,\r\n  TreeParent,\r\n  TreeLevelColumn,\r\n} from "alapa";\r\n\r\n@TableModel()\r\n@Tree("closure-table")\r\nexport class Category {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  name: string;\r\n\r\n  @Column()\r\n  description: string;\r\n\r\n  @TreeChildren()\r\n  children: Category[];\r\n\r\n  @TreeParent()\r\n  parent: Category;\r\n\r\n  @TreeLevelColumn()\r\n  level: number;\r\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>t});var s=r(6540);const l={},a=s.createContext(l);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);