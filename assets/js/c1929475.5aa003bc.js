"use strict";(self.webpackChunkalapa_doc=self.webpackChunkalapa_doc||[]).push([[9129],{7624:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"models/events-subscriber","title":"Events Subscribers","description":"Model Events Subscribers in Alapa are powerful tools for hooking into the lifecycle of entities.","source":"@site/docs/models/events-subscriber.mdx","sourceDirName":"models","slug":"/models/events-subscriber","permalink":"/docs/models/events-subscriber","draft":false,"unlisted":false,"editUrl":"https://github.com/alapajs/alapa-docs/tree/main/docs/models/events-subscriber.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Events Subscribers"},"sidebar":"tutorialSidebar","previous":{"title":"Lifecycle","permalink":"/docs/models/lifecycle"},"next":{"title":"Database Configuration","permalink":"/docs/models/config"}}');var t=r(4848),i=r(8453);const l={sidebar_position:4,title:"Events Subscribers"},d="Model Events Subscribers",c={},o=[{value:"Why Use Subscribers?",id:"why-use-subscribers",level:2},{value:"Supported Lifecycle Events",id:"supported-lifecycle-events",level:2},{value:"How to Write a Subscriber",id:"how-to-write-a-subscriber",level:2},{value:"Specific Subscriber (Users Model)",id:"specific-subscriber-users-model",level:3},{value:"Highlights:",id:"highlights",level:4},{value:"Global Subscriber (All Models)",id:"global-subscriber-all-models",level:3},{value:"Highlights:",id:"highlights-1",level:4},{value:"Best Practices",id:"best-practices",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{CodeScreen:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeScreen",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"model-events-subscribers",children:"Model Events Subscribers"})}),"\n",(0,t.jsxs)(n.p,{children:["Model ",(0,t.jsx)(n.strong,{children:"Events Subscribers"})," in Alapa are powerful tools for hooking into the lifecycle of entities.\r\nThey allow you to run custom logic when things happen to your data \u2014 like before inserting a user,\r\nafter updating a product, or when any record is deleted. Think of them as event listeners for your database models."]}),"\n",(0,t.jsx)(n.h2,{id:"why-use-subscribers",children:"Why Use Subscribers?"}),"\n",(0,t.jsx)(n.p,{children:"Subscribers let you:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"React to lifecycle events"})," like insert/update/delete/load."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keep models clean"})," by decoupling business logic."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Log or audit"})," every database change."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Trigger side effects"})," like sending emails or pushing events."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"supported-lifecycle-events",children:"Supported Lifecycle Events"}),"\n",(0,t.jsx)(n.p,{children:"Here are all the lifecycle methods you can use in a subscriber:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Method"}),(0,t.jsx)(n.th,{children:"Triggered When\u2026"}),(0,t.jsx)(n.th,{children:"Event Object"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"beforeInsert"})}),(0,t.jsx)(n.td,{children:"Before inserting a new entity"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"InsertEvent<T>"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"afterInsert"})}),(0,t.jsx)(n.td,{children:"After inserting a new entity"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"InsertEvent<T>"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"beforeUpdate"})}),(0,t.jsx)(n.td,{children:"Before updating an existing entity"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"UpdateEvent<T>"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"afterUpdate"})}),(0,t.jsx)(n.td,{children:"After updating an existing entity"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"UpdateEvent<T>"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"beforeRemove"})}),(0,t.jsx)(n.td,{children:"Before deleting an entity"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RemoveEvent<T>"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"afterRemove"})}),(0,t.jsx)(n.td,{children:"After deleting an entity"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"RemoveEvent<T>"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"afterLoad"})}),(0,t.jsx)(n.td,{children:"After loading an entity from the database"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"LoadEvent<T>"})})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Each lifecycle method gives you full access to:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event.entity"}),": the entity being inserted/updated/removed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event.databaseEntity"}),": the previous value (before update)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"event.manager"}),": the DB manager if you need to make DB queries"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You can:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Target a ",(0,t.jsx)(n.strong,{children:"specific entity"})," (",(0,t.jsx)(n.code,{children:"Users"}),", ",(0,t.jsx)(n.code,{children:"Orders"}),", etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:["Or listen to events on ",(0,t.jsx)(n.strong,{children:"all entities"})," in your app"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"how-to-write-a-subscriber",children:"How to Write a Subscriber"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"Subscriber"})," implements ",(0,t.jsx)(n.code,{children:"ModelSubscriberInterface"})," and uses the ",(0,t.jsx)(n.code,{children:"@EventSubscriber()"})," decorator."]}),"\n",(0,t.jsx)(n.h3,{id:"specific-subscriber-users-model",children:"Specific Subscriber (Users Model)"}),"\n",(0,t.jsxs)(n.p,{children:["This approach lets you track lifecycle events ",(0,t.jsxs)(n.strong,{children:["only for the ",(0,t.jsx)(n.code,{children:"Users"})," model"]}),"."]}),"\n",(0,t.jsx)(r,{title:"src/app/subscribers/user-subscriber.ts",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import {\r\n  EventSubscriber,\r\n  ModelSubscriberInterface,\r\n  InsertEvent,\r\n  UpdateEvent,\r\n  RemoveEvent,\r\n  LoadEvent,\r\n} from "alapa";\r\nimport { Users } from "../models/user";\r\n\r\n@EventSubscriber()\r\nexport class UserSubscriber implements ModelSubscriberInterface<Users> {\r\n  /**\r\n   * Subscribe only to Users entity\r\n   */\r\n  listenTo() {\r\n    return Users;\r\n  }\r\n\r\n  beforeInsert(event: InsertEvent<Users>) {\r\n    console.log(`[beforeInsert] New user: ${event.entity?.email}`);\r\n  }\r\n\r\n  afterInsert(event: InsertEvent<Users>) {\r\n    console.log(`[afterInsert] Inserted user with ID: ${event.entity?.id}`);\r\n  }\r\n\r\n  beforeUpdate(event: UpdateEvent<Users>) {\r\n    console.log(`[beforeUpdate] Updating user ${event.databaseEntity?.id}`);\r\n  }\r\n\r\n  afterUpdate(event: UpdateEvent<Users>) {\r\n    console.log(`[afterUpdate] Updated user ${event.entity?.id}`);\r\n  }\r\n\r\n  beforeRemove(event: RemoveEvent<Users>) {\r\n    console.log(`[beforeRemove] Removing user ${event.entity?.id}`);\r\n  }\r\n\r\n  afterRemove(event: RemoveEvent<Users>) {\r\n    console.log(`[afterRemove] Removed user ${event.entity?.id}`);\r\n  }\r\n\r\n  afterLoad(entity: Users, event?: LoadEvent<Users>) {\r\n    console.log(`[afterLoad] Loaded user ${entity.id}`);\r\n  }\r\n}\n'})})}),"\n",(0,t.jsx)(n.h4,{id:"highlights",children:"Highlights:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"listenTo()"})," binds the subscriber to the ",(0,t.jsx)(n.code,{children:"Users"})," entity only."]}),"\n",(0,t.jsx)(n.li,{children:"Each method corresponds to a lifecycle event."}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"event.entity"})," for the new version, and ",(0,t.jsx)(n.code,{children:"event.databaseEntity"})," for the old."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"global-subscriber-all-models",children:"Global Subscriber (All Models)"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes, you need to track changes across the whole system (e.g., for auditing or logging)."}),"\n",(0,t.jsxs)(n.p,{children:["Here\u2019s how to write a subscriber that listens to ",(0,t.jsx)(n.strong,{children:"all models"}),", not just one."]}),"\n",(0,t.jsx)(r,{title:"src/app/subscribers/global-subscriber.ts",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import {\r\n  EventSubscriber,\r\n  ModelSubscriberInterface,\r\n  InsertEvent,\r\n  UpdateEvent,\r\n  RemoveEvent,\r\n} from "alapa";\r\n\r\n@EventSubscriber()\r\nexport class GlobalSubscriber implements ModelSubscriberInterface {\r\n  /**\r\n   * No listenTo() means this applies to all models.\r\n   */\r\n\r\n  afterInsert(event: InsertEvent<any>) {\r\n    console.log(\r\n      `[Global:afterInsert] ${event.metadata.tableName} inserted (ID: ${event.entity?.id})`\r\n    );\r\n  }\r\n\r\n  afterUpdate(event: UpdateEvent<any>) {\r\n    console.log(\r\n      `[Global:afterUpdate] ${event.metadata.tableName} updated (ID: ${event.entity?.id})`\r\n    );\r\n  }\r\n\r\n  afterRemove(event: RemoveEvent<any>) {\r\n    console.log(\r\n      `[Global:afterRemove] ${event.metadata.tableName} removed (ID: ${event.entity?.id})`\r\n    );\r\n  }\r\n}\n'})})}),"\n",(0,t.jsx)(n.h4,{id:"highlights-1",children:"Highlights:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["This subscriber reacts to ",(0,t.jsx)(n.strong,{children:"any model"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Useful for building a central ",(0,t.jsx)(n.strong,{children:"audit system"}),", analytics, or debugging."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"specific subscribers"})," for tightly coupled logic (e.g., user verification)."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"global subscribers"})," for cross-cutting concerns (e.g., logging, metrics)."]}),"\n",(0,t.jsxs)(n.li,{children:["Make methods ",(0,t.jsx)(n.code,{children:"async"})," if they use ",(0,t.jsx)(n.code,{children:"await"})," logic (e.g., saving audit logs)."]}),"\n",(0,t.jsxs)(n.li,{children:["Keep logic ",(0,t.jsx)(n.strong,{children:"fast and non-blocking"})," where possible."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var s=r(6540);const t={},i=s.createContext(t);function l(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);