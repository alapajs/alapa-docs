"use strict";(self.webpackChunkalapa_doc=self.webpackChunkalapa_doc||[]).push([[3618],{9845:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"api-docs/schema","title":"Schema","description":"Alapa supports reusable OpenAPI schemas to document your API endpoints, improving maintainability and reducing code duplication. All schema files are organized in the docs/schemas directory.","source":"@site/docs/api-docs/schema.mdx","sourceDirName":"api-docs","slug":"/api-docs/schema","permalink":"/docs/api-docs/schema","draft":false,"unlisted":false,"editUrl":"https://github.com/alapajs/alapa-docs/tree/main/docs/api-docs/schema.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Schema"},"sidebar":"tutorialSidebar","previous":{"title":"Generate","permalink":"/docs/api-docs/generate"},"next":{"title":"Undocumented","permalink":"/docs/undocumented/"}}');var t=s(4848),i=s(8453);const a={sidebar_position:2,title:"Schema"},c="API Schema Documentation",o={},l=[{value:"Defining a Schema",id:"defining-a-schema",level:2},{value:"Example: Album Object Schema",id:"example-album-object-schema",level:3},{value:"Schema References",id:"schema-references",level:2},{value:"Single Object Response",id:"single-object-response",level:3},{value:"Array Response Example",id:"array-response-example",level:3},{value:"Custom Schema Locations",id:"custom-schema-locations",level:2},{value:"Key Advantages",id:"key-advantages",level:2}];function d(e){const n={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{CodeScreen:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeScreen",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"api-schema-documentation",children:"API Schema Documentation"})}),"\n",(0,t.jsxs)(n.p,{children:["Alapa supports reusable OpenAPI schemas to document your API endpoints, improving maintainability and reducing code duplication. All schema files are organized in the ",(0,t.jsx)(n.code,{children:"docs/schemas"})," directory."]}),"\n",(0,t.jsx)(n.h2,{id:"defining-a-schema",children:"Defining a Schema"}),"\n",(0,t.jsx)(n.p,{children:"Schemas are defined in YAML files and can represent:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Objects"}),"\n",(0,t.jsx)(n.li,{children:"Arrays"}),"\n",(0,t.jsx)(n.li,{children:"Enums"}),"\n",(0,t.jsx)(n.li,{children:"Other complex data types"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-album-object-schema",children:"Example: Album Object Schema"}),"\n",(0,t.jsx)(s,{title:"docs/schemas/album/info.yaml",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# highlight-next-line\r\nAlbums: # Schema identifier for references - MUST be unique across all schemas\r\n  type: object\r\n  properties:\r\n    id:\r\n      type: string\r\n    title:\r\n      type: string\r\n    artist:\r\n      type: string\r\n    releaseDate:\r\n      type: string\r\n      format: date\r\n    createdAt:\r\n      type: string\r\n      format: date-time\r\n    updatedAt:\r\n      type: string\r\n      format: date-time\n"})})}),"\n",(0,t.jsx)(n.p,{children:"This schema defines an Album object with core metadata and automatic timestamp fields, reusable across endpoints."}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsx)(n.mdxAdmonitionTitle,{children:(0,t.jsx)(n.strong,{children:"Schema Naming Rules:"})}),(0,t.jsx)(n.p,{children:"Each schema requires a globally unique name (case-sensitive, e.g.,\r\nUserProfile \u2260 userprofile), and duplicate names will silently override existing definitions."})]}),"\n",(0,t.jsx)(n.h2,{id:"schema-references",children:"Schema References"}),"\n",(0,t.jsxs)(n.p,{children:["Reference schemas by name using the ",(0,t.jsx)(n.code,{children:"\\$ref"})," notation:"]}),"\n",(0,t.jsx)(s,{title:"src/api/album/Controller.ts",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'data: {\r\n  $ref: "#components/schemas/Albums";\r\n}\n'})})}),"\n",(0,t.jsx)(n.p,{children:"Alapa's decorator system automatically incorporates these references into generated Swagger/OpenAPI documentation."}),"\n",(0,t.jsx)(n.h3,{id:"single-object-response",children:"Single Object Response"}),"\n",(0,t.jsx)(s,{title:"src/api/album/Controller.ts",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'@OpenApiOperation({\r\n  summary: "Get an album by ID",\r\n  description: "Returns an album by its ID",\r\n  parameters: [{\r\n    name: "album",\r\n    in: "path",\r\n    required: true\r\n  }],\r\n  responses: {\r\n    200: {\r\n      description: "Success response",\r\n      content: {\r\n        "application/json": {\r\n          schema: {\r\n            type: "object",\r\n            properties: {\r\n              status: { type: "string", example: "success" },\r\n              message: { type: "string", example: "Album fetched successfully" },\r\n              // highlight-next-line\r\n              data: { $ref: "#components/schemas/Albums" }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n})\n'})})}),"\n",(0,t.jsx)(n.h3,{id:"array-response-example",children:"Array Response Example"}),"\n",(0,t.jsx)(s,{title:"src/api/album/Controller.ts",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'@OpenApiOperation({\r\n  summary: "Get all albums",\r\n  description: "Returns all albums",\r\n  responses: {\r\n    200: {\r\n      description: "Success response",\r\n      content: {\r\n        "application/json": {\r\n          schema: {\r\n            type: "object",\r\n            properties: {\r\n              status: { type: "string", example: "success" },\r\n              message: { type: "string", example: "Albums fetched successfully" },\r\n              data: {\r\n                type: "array",\r\n                // highlight-next-line\r\n                items: { $ref: "#components/schemas/Albums" }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n})\n'})})}),"\n",(0,t.jsx)(n.h2,{id:"custom-schema-locations",children:"Custom Schema Locations"}),"\n",(0,t.jsx)(n.p,{children:"Configure the schema directory path in your API configuration:"}),"\n",(0,t.jsx)(s,{title:"src/config/api.ts",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { APIConfiguration } from "alapa";\r\n\r\nexport const apiConfig: APIConfiguration = {\r\n  docs: {\r\n    // highlight-next-line\r\n    schemasDir: process.env.DOCS_SCHEMAS_DIR || "docs/schemas",\r\n  },\r\n  // ... other configuration\r\n};\n'})})}),"\n",(0,t.jsx)(n.p,{children:"Override the default path via environment variable:"}),"\n",(0,t.jsx)(s,{title:".env",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-env",children:"DOCS_SCHEMAS_DIR=custom/path/to/schemas\n"})})}),"\n",(0,t.jsx)(n.h2,{id:"key-advantages",children:"Key Advantages"}),"\n",(0,t.jsxs)(n.p,{children:["\u25b8 ",(0,t.jsx)(n.strong,{children:"Consistent Documentation"})," - Uniform structure across all endpoints",(0,t.jsx)(n.br,{}),"\n","\u25b8 ",(0,t.jsx)(n.strong,{children:"Single Source of Truth"})," - Changes propagate automatically",(0,t.jsx)(n.br,{}),"\n","\u25b8 ",(0,t.jsx)(n.strong,{children:"Reduced Duplication"})," - Eliminate repetitive definitions",(0,t.jsx)(n.br,{}),"\n","\u25b8 ",(0,t.jsx)(n.strong,{children:"Flexible Configuration"})," - Customizable storage location"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var r=s(6540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);