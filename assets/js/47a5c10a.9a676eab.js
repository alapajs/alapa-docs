"use strict";(self.webpackChunkalapa_doc=self.webpackChunkalapa_doc||[]).push([[3991],{8179:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>o});const d=JSON.parse('{"id":"models/field-controls-and-data-operations/includes-and-excludes","title":"Include and Exclude Fields","description":"Alapa offers robust mechanisms for controlling which fields are exposed to clients through includeFields and excludeFields.","source":"@site/docs/models/field-controls-and-data-operations/includes-and-excludes.mdx","sourceDirName":"models/field-controls-and-data-operations","slug":"/models/field-controls-and-data-operations/includes-and-excludes","permalink":"/docs/models/field-controls-and-data-operations/includes-and-excludes","draft":false,"unlisted":false,"editUrl":"https://github.com/alapajs/alapa-docs/tree/main/docs/models/field-controls-and-data-operations/includes-and-excludes.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Include and Exclude Fields"},"sidebar":"tutorialSidebar","previous":{"title":"Create and Fill","permalink":"/docs/models/field-controls-and-data-operations/create-and-fill"},"next":{"title":"Formatted Fields","permalink":"/docs/models/field-controls-and-data-operations/forrmated-fields"}}');var i=l(4848),s=l(8453);const r={sidebar_position:3,title:"Include and Exclude Fields"},c="Include and Exclude Fields",t={},o=[{value:"Core Concept",id:"core-concept",level:2},{value:"Static Declaration with <code>includeFields</code>",id:"static-declaration-with-includefields",level:2},{value:"Implementing Output",id:"implementing-output",level:2},{value:"Property-Level Declaration with <code>@IncludeField()</code>",id:"property-level-declaration-with-includefield",level:2},{value:"<code>setIncludeFields()</code> Method",id:"setincludefields-method",level:2},{value:"Conditional Include Fields",id:"conditional-include-fields",level:2},{value:"Object-Based Conditional Fields",id:"object-based-conditional-fields",level:3},{value:"Decorator-Based Conditional Fields",id:"decorator-based-conditional-fields",level:3},{value:"<code>updateIncludeField()</code>",id:"updateincludefield",level:2},{value:"Override Mode",id:"override-mode",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Retrieve Current Include Fields",id:"retrieve-current-include-fields",level:2},{value:"Exclude Fields",id:"exclude-fields",level:2},{value:"Static Declaration with <code>excludeFields</code>",id:"static-declaration-with-excludefields",level:3},{value:"Decorator-Based Excludes",id:"decorator-based-excludes",level:3},{value:"<code>setExcludeFields()</code> Method",id:"setexcludefields-method",level:2},{value:"Update <code>excludeFields</code> at Runtime",id:"update-excludefields-at-runtime",level:2},{value:"Retrieve Current Exclude Fields",id:"retrieve-current-exclude-fields",level:2},{value:"Methods That Respect Include/Exclude Fields",id:"methods-that-respect-includeexclude-fields",level:2},{value:"Unified Field Resolution &amp; Best Practices",id:"unified-field-resolution--best-practices",level:2},{value:"Recommended Best Practices",id:"recommended-best-practices",level:3}];function a(e){const n={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components},{BrowserWindow:l,CodeScreen:d}=n;return l||h("BrowserWindow",!0),d||h("CodeScreen",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"include-and-exclude-fields",children:"Include and Exclude Fields"})}),"\n",(0,i.jsxs)(n.p,{children:["Alapa offers robust mechanisms for controlling which fields are exposed to clients through ",(0,i.jsx)(n.code,{children:"includeFields"})," and ",(0,i.jsx)(n.code,{children:"excludeFields"}),".",(0,i.jsx)(n.br,{}),"\n","These configurations help sanitize model output for browsers and APIs, protecting sensitive data while improving clarity and consistency."]}),"\n",(0,i.jsx)(n.p,{children:"Both decorators and dynamic runtime utilities are supported, giving you maximum flexibility while keeping your models secure."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"core-concept",children:"Core Concept"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"includeFields"})})," \u2013 explicitly define which fields ",(0,i.jsx)(n.strong,{children:"should be included"})," in client responses."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"excludeFields"})})," \u2013 define which fields ",(0,i.jsx)(n.strong,{children:"must be excluded"})," from client responses."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Priority Rule",type:"tip",children:(0,i.jsxs)(n.p,{children:["When both ",(0,i.jsx)(n.code,{children:"includeFields"})," and ",(0,i.jsx)(n.code,{children:"excludeFields"})," are defined, ",(0,i.jsx)(n.code,{children:"includeFields"})," takes precedence and ",(0,i.jsx)(n.code,{children:"excludeFields"})," is ignored."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"static-declaration-with-includefields",children:["Static Declaration with ",(0,i.jsx)(n.code,{children:"includeFields"})]}),"\n",(0,i.jsxs)(n.p,{children:["Define output-safe fields statically by assigning them to the ",(0,i.jsx)(n.code,{children:"protected includeFields"})," property."]}),"\n",(0,i.jsx)(d,{title:"src/app/models/user.ts",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Model, Column, ModelIncludeFields, TableModel } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @Column()\r\n  passwordResetToken: string;\r\n\r\n  @Column()\r\n  password: string;\r\n\r\n  // highlight-start\r\n  protected includeFields: ModelIncludeFields<Users>[] = [\r\n    "firstName",\r\n    "lastName",\r\n  ];\r\n  // highlight-end\r\n}\n'})})}),"\n",(0,i.jsx)(n.admonition,{title:"Security Tip",type:"caution",children:(0,i.jsxs)(n.p,{children:["Avoid using ",(0,i.jsx)(n.code,{children:'"*"'})," to include all fields, as it may unintentionally expose sensitive attributes to clients."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"implementing-output",children:"Implementing Output"}),"\n",(0,i.jsxs)(n.p,{children:["When a model is serialized using methods like ",(0,i.jsx)(n.code,{children:"res.json()"}),", ",(0,i.jsx)(n.code,{children:"toClient()"}),", or ",(0,i.jsx)(n.code,{children:"toAPI()"}),", only the fields in ",(0,i.jsx)(n.code,{children:"includeFields"})," will appear in the response."]}),"\n",(0,i.jsx)(d,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const user = await Users.findOneBy({ id: 1 });\r\n// highlight-next-line\r\nres.json(user);\n"})})}),"\n",(0,i.jsx)(l,{title:"users/1",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{ "firstName": "John", "lastName": "Doe" }\n'})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"property-level-declaration-with-includefield",children:["Property-Level Declaration with ",(0,i.jsx)(n.code,{children:"@IncludeField()"})]}),"\n",(0,i.jsx)(n.p,{children:"You can also define included fields directly on properties using decorators."}),"\n",(0,i.jsx)(d,{title:"src/app/models/user.ts",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Model, Column, IncludeField, TableModel } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @Column()\r\n  password: string;\r\n\r\n  // highlight-next-line\r\n  @IncludeField()\r\n  @Column()\r\n  firstName: string;\r\n\r\n  // highlight-next-line\r\n  @IncludeField()\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @Column()\r\n  balance: number;\r\n\r\n  @Column()\r\n  isActive: boolean;\r\n}\n'})})}),"\n",(0,i.jsx)(d,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const user = await Users.findOneBy({ id: 1 });\r\nconst output = user.toClient();\r\nconsole.log(output); // { "firstName": "John", "lastName": "Doe" }\n'})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"setincludefields-method",children:[(0,i.jsx)(n.code,{children:"setIncludeFields()"})," Method"]}),"\n",(0,i.jsxs)(n.p,{children:["For dynamic include logic, override the ",(0,i.jsx)(n.code,{children:"setIncludeFields()"})," method to return specific fields programmatically."]}),"\n",(0,i.jsx)(d,{title:"src/app/models/user.ts",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Model, Column, ModelIncludeFields, TableModel } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @Column()\r\n  password: string;\r\n\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  // highlight-start\r\n  protected setIncludeFields(): ModelIncludeFields<Users>[] {\r\n    return ["firstName", "lastName"];\r\n  }\r\n  // highlight-end\r\n}\n'})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"conditional-include-fields",children:"Conditional Include Fields"}),"\n",(0,i.jsx)(n.p,{children:"You can include fields conditionally using booleans or functions."}),"\n",(0,i.jsx)(n.h3,{id:"object-based-conditional-fields",children:"Object-Based Conditional Fields"}),"\n",(0,i.jsx)(d,{title:"src/app/models/user.ts",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Model, Column, TableModel } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @Column()\r\n  role: string;\r\n\r\n  @Column()\r\n  balance: number;\r\n\r\n  // highlight-start\r\n  protected includeFields = [\r\n    "firstName",\r\n    "lastName",\r\n    {\r\n      balance: (user) => user.role === "admin",\r\n    },\r\n  ];\r\n  // highlight-end\r\n}\n'})})}),"\n",(0,i.jsx)(n.h3,{id:"decorator-based-conditional-fields",children:"Decorator-Based Conditional Fields"}),"\n",(0,i.jsxs)(n.p,{children:["You can apply conditions directly using the ",(0,i.jsx)(n.code,{children:"@IncludeField()"})," decorator with a function."]}),"\n",(0,i.jsx)(d,{title:"src/app/models/user.ts",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Model, Column, IncludeField, TableModel } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @IncludeField()\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @IncludeField()\r\n  @Column()\r\n  lastName: string;\r\n\r\n  // highlight-next-line\r\n  @IncludeField((user) => user.role === "admin")\r\n  @Column()\r\n  balance: number;\r\n}\n'})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"updateincludefield",children:(0,i.jsx)(n.code,{children:"updateIncludeField()"})}),"\n",(0,i.jsx)(n.p,{children:"You can update the list of included fields at runtime."}),"\n",(0,i.jsx)(d,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const user = await Users.findOneBy({ id: 1 });\r\n\r\n// highlight-next-line\r\nuser.updateIncludeField(["balance"]);\r\n\r\nconst output = user.toClient();\r\nconsole.log(output); // { "firstName": "John", "lastName": "Doe", "balance": 200.0 }\n'})})}),"\n",(0,i.jsx)(n.h3,{id:"override-mode",children:"Override Mode"}),"\n",(0,i.jsx)(n.p,{children:"To fully replace existing include definitions:"}),"\n",(0,i.jsx)(d,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const user = await Users.findOneBy({ id: 1 });\r\n\r\n// highlight-next-line\r\nuser.updateIncludeField(["balance"], true);\r\n\r\nconst output = user.toClient();\r\nconsole.log(output); // { "balance": 200.0 }\n'})})}),"\n",(0,i.jsx)(n.h3,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"fields"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ModelIncludeFieldsMethod<Users>[]"})}),(0,i.jsx)(n.td,{children:"Fields to include"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"override"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"boolean"})}),(0,i.jsxs)(n.td,{children:["If ",(0,i.jsx)(n.code,{children:"true"}),", replaces all existing definitions"]})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"retrieve-current-include-fields",children:"Retrieve Current Include Fields"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"getIncludeField()"})," to access the current include rules at runtime."]}),"\n",(0,i.jsx)(d,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const user = await Users.findOneBy({ id: 1 });\r\n// highlight-next-line\r\nconst includeFields = user.getIncludeField();\r\nconsole.log(includeFields); // ["firstName", "lastName"]\n'})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"exclude-fields",children:"Exclude Fields"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"excludeFields"})," to define fields that should never be exposed in client responses."]}),"\n",(0,i.jsxs)(n.h3,{id:"static-declaration-with-excludefields",children:["Static Declaration with ",(0,i.jsx)(n.code,{children:"excludeFields"})]}),"\n",(0,i.jsx)(d,{title:"src/app/models/user.ts",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Model, Column, ModelExcludeFields, TableModel } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @Column()\r\n  password: string;\r\n\r\n  @Column()\r\n  ssn: string;\r\n\r\n  // highlight-next-line\r\n  protected excludeFields: ModelExcludeFields<Users>[] = ["password", "ssn"];\r\n}\n'})})}),"\n",(0,i.jsx)(n.h3,{id:"decorator-based-excludes",children:"Decorator-Based Excludes"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"@ExcludeField()"})," decorator with or without conditions."]}),"\n",(0,i.jsx)(d,{title:"src/app/models/user.ts",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Column, ExcludeField } from "alapa";\r\n\r\n// highlight-next-line\r\n@ExcludeField()\r\n@Column()\r\npassword: string;\r\n\r\n// highlight-next-line\r\n@ExcludeField((user) => user.role !== "admin")\r\n@Column()\r\nssn: string;\n'})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"setexcludefields-method",children:[(0,i.jsx)(n.code,{children:"setExcludeFields()"})," Method"]}),"\n",(0,i.jsxs)(n.p,{children:["You can dynamically define excluded fields by overriding ",(0,i.jsx)(n.code,{children:"setExcludeFields()"}),"."]}),"\n",(0,i.jsx)(d,{title:"src/app/models/user.ts",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { Model, Column, ModelExcludeFields, TableModel } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @Column()\r\n  password: string;\r\n\r\n  @Column()\r\n  ssn: number;\r\n\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  // highlight-start\r\n  protected setExcludeFields(): ModelExcludeFields<Users>[] {\r\n    return ["ssn", "password"];\r\n  }\r\n  // highlight-end\r\n}\n'})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"update-excludefields-at-runtime",children:["Update ",(0,i.jsx)(n.code,{children:"excludeFields"})," at Runtime"]}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"updateExcludeField()"})," to modify excluded fields dynamically."]}),"\n",(0,i.jsx)(d,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const user = await Users.findOneBy({ id: 1 });\r\n\r\n// highlight-next-line\r\nuser.updateExcludeField(["password", "ssn"], true);\n'})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"retrieve-current-exclude-fields",children:"Retrieve Current Exclude Fields"}),"\n",(0,i.jsx)(d,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const user = await Users.findOneBy({ id: 1 });\r\n// highlight-next-line\r\nconst excluded = user.getExcludeField();\r\nconsole.log(excluded); // ["password", "ssn"]\n'})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"methods-that-respect-includeexclude-fields",children:"Methods That Respect Include/Exclude Fields"}),"\n",(0,i.jsxs)(n.p,{children:["The following model methods automatically apply both ",(0,i.jsx)(n.code,{children:"includeFields"})," and ",(0,i.jsx)(n.code,{children:"excludeFields"})," filtering:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Model.toClient()"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Model.toAPI()"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Model.toJSON()"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Model.sanitize()"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"Model.sterilize()"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"res.api()"})}),"\n"]}),"\n",(0,i.jsx)(d,{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const user = await Users.findOneBy({ id: 1 });\r\n// highlight-next-line\r\nconst output = user.toClient();\r\nconsole.log(output); // { "firstName": "John", "lastName": "Doe" }\n'})})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"unified-field-resolution--best-practices",children:"Unified Field Resolution & Best Practices"}),"\n",(0,i.jsx)(n.p,{children:"Alapa intelligently merges all include and exclude definitions using the following rules:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Fields from ",(0,i.jsx)(n.code,{children:"includeFields"}),", ",(0,i.jsx)(n.code,{children:"@IncludeField()"}),", and ",(0,i.jsx)(n.code,{children:"setIncludeFields()"})," are combined."]}),"\n",(0,i.jsxs)(n.li,{children:["Fields from ",(0,i.jsx)(n.code,{children:"excludeFields"}),", ",(0,i.jsx)(n.code,{children:"@ExcludeField()"}),", and ",(0,i.jsx)(n.code,{children:"setExcludeFields()"})," are combined."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsxs)(n.strong,{children:["When both ",(0,i.jsx)(n.code,{children:"include"})," and ",(0,i.jsx)(n.code,{children:"exclude"})," are present, ",(0,i.jsx)(n.code,{children:"include"})," always overrides ",(0,i.jsx)(n.code,{children:"exclude"}),"."]})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"recommended-best-practices",children:"Recommended Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 Prefer ",(0,i.jsx)(n.code,{children:"includeFields"})," for precise control over model output"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udeab Avoid defining both ",(0,i.jsx)(n.code,{children:"includeFields"})," and ",(0,i.jsx)(n.code,{children:"excludeFields"})," on the same model"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd10 Use ",(0,i.jsx)(n.code,{children:"excludeFields"})," to hide specific sensitive attributes"]}),"\n",(0,i.jsx)(n.li,{children:"\ud83e\uddea Enable strict development checks if available"}),"\n",(0,i.jsx)(n.li,{children:"\ud83d\udce4 Regularly audit exposed fields to prevent accidental data leaks"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["By carefully managing ",(0,i.jsx)(n.code,{children:"include"})," and ",(0,i.jsx)(n.code,{children:"exclude"})," configurations, you can keep your APIs predictable, maintainable, and secure."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}function h(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},8453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>c});var d=l(6540);const i={},s=d.createContext(i);function r(e){const n=d.useContext(s);return d.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),d.createElement(s.Provider,{value:n},e.children)}}}]);