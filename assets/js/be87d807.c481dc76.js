"use strict";(self.webpackChunkalapa_doc=self.webpackChunkalapa_doc||[]).push([[7388],{9632:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"models/field-controls-and-data-operations/forrmated-fields","title":"Formatted Fields","description":"Alapa allows you to format specific fields of a model after the entity is loaded.","source":"@site/docs/models/field-controls-and-data-operations/forrmated-fields.mdx","sourceDirName":"models/field-controls-and-data-operations","slug":"/models/field-controls-and-data-operations/forrmated-fields","permalink":"/docs/models/field-controls-and-data-operations/forrmated-fields","draft":false,"unlisted":false,"editUrl":"https://github.com/alapajs/alapa-docs/tree/main/docs/models/field-controls-and-data-operations/forrmated-fields.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Formatted Fields"},"sidebar":"tutorialSidebar","previous":{"title":"Include and Exclude Fields","permalink":"/docs/models/field-controls-and-data-operations/includes-and-excludes"},"next":{"title":"Lifecycle","permalink":"/docs/models/lifecycle"}}');var d=t(4848),l=t(8453);const s={sidebar_position:5,title:"Formatted Fields"},o=void 0,i={},a=[{value:"<code>@FormattedField</code> Decorator",id:"formattedfield-decorator",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Example: Invalid Return Type",id:"example-invalid-return-type",level:3},{value:"<code>@FormattedField</code> Using a Method Name",id:"formattedfield-using-a-method-name",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"<code>@FormattedFieldMethod</code> Decorator",id:"formattedfieldmethod-decorator",level:2},{value:"Syntax",id:"syntax-2",level:3},{value:"Example",id:"example-2",level:3},{value:"Parameters",id:"parameters-2",level:3},{value:"<code>@AfterLoad()</code> Hook",id:"afterload-hook",level:2},{value:"Example",id:"example-3",level:3}];function c(e){const r={code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components},{CodeScreen:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeScreen",!0),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.p,{children:"Alapa allows you to format specific fields of a model after the entity is loaded."}),"\n",(0,d.jsx)(r.p,{children:"This is useful for post-processing values before they are exposed or used elsewhere in your application."}),"\n",(0,d.jsx)(t,{title:"src/app/models/user.ts",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-typescript",children:'import { Model, Column, TableModel, ModelFormattedFields } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @Column()\r\n  profilePhoto: string;\r\n\r\n  //highlight-start\r\n  protected formattedFields: ModelFormattedFields<Users> = {\r\n    profilePhoto: (user: Users) =>\r\n      "https://example.com/images/" + user.profilePhoto,\r\n  };\r\n  //highlight-end\r\n}\n'})})}),"\n",(0,d.jsx)(r.hr,{}),"\n",(0,d.jsxs)(r.h2,{id:"formattedfield-decorator",children:[(0,d.jsx)(r.code,{children:"@FormattedField"})," Decorator"]}),"\n",(0,d.jsxs)(r.p,{children:["The ",(0,d.jsx)(r.code,{children:"@FormattedField"})," decorator allows you to automatically apply formatting logic to a model field using a function."]}),"\n",(0,d.jsx)(r.h3,{id:"syntax",children:"Syntax"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-ts",children:"@FormattedField<Model, fieldName>(formatterFunction)\n"})}),"\n",(0,d.jsx)(r.h3,{id:"example",children:"Example"}),"\n",(0,d.jsx)(t,{title:"src/app/models/user.ts",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-typescript",children:'import { Model, Column, TableModel, FormattedField, md5 } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  //highlight-next-line\r\n  @FormattedField<Users, "secret">(md5)\r\n  @Column()\r\n  secret: string;\r\n}\n'})})}),"\n",(0,d.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:(0,d.jsx)(r.strong,{children:"Parameter"})}),(0,d.jsx)(r.th,{children:(0,d.jsx)(r.strong,{children:"Description"})}),(0,d.jsx)(r.th,{children:(0,d.jsx)(r.strong,{children:"Type"})})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"Model"})}),(0,d.jsx)(r.td,{children:"The class representing your model"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"class"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"fieldName"})}),(0,d.jsx)(r.td,{children:"The field (non-method) to be formatted"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"string"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"function"})}),(0,d.jsx)(r.td,{children:"A function that transforms the field's value appropriately"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"Function"})})]})]})]}),"\n",(0,d.jsx)(r.p,{children:"The formatting function must return the correct type for the target field. If it does not, a type error\r\nwill be thrown during compilation."}),"\n",(0,d.jsx)(r.h3,{id:"example-invalid-return-type",children:"Example: Invalid Return Type"}),"\n",(0,d.jsx)(t,{title:"src/app/models/user.ts",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-typescript",children:"// Type 'number' is not assignable to type 'string'.\r\n//error-next-line\r\n@FormattedField<Users, \"firstName\">(NumberOnly)\r\n@Column()\r\nfirstName: string;\n"})})}),"\n",(0,d.jsx)(r.hr,{}),"\n",(0,d.jsxs)(r.h2,{id:"formattedfield-using-a-method-name",children:[(0,d.jsx)(r.code,{children:"@FormattedField"})," Using a Method Name"]}),"\n",(0,d.jsx)(r.p,{children:"You can also pass a method name (as a string) instead of a direct function.\r\nThis is useful for referencing instance methods, including inherited ones."}),"\n",(0,d.jsx)(r.h3,{id:"syntax-1",children:"Syntax"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-ts",children:'@FormattedField<Model, fieldName, methodName>("methodName")\n'})}),"\n",(0,d.jsx)(r.h3,{id:"example-1",children:"Example"}),"\n",(0,d.jsx)(t,{title:"src/app/models/user.ts",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-typescript",children:'import { Model, FormattedField, Column, TableModel } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  @FormattedField<Users, "fullName", "getFullName">("getFullName")\r\n  fullName: string;\r\n\r\n  getFullName() {\r\n    return `${this.firstName} ${this.lastName}`;\r\n  }\r\n}\n'})})}),"\n",(0,d.jsx)(r.h3,{id:"parameters-1",children:"Parameters"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:(0,d.jsx)(r.strong,{children:"Parameter"})}),(0,d.jsx)(r.th,{children:(0,d.jsx)(r.strong,{children:"Description"})}),(0,d.jsx)(r.th,{children:(0,d.jsx)(r.strong,{children:"Type"})})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"Model"})}),(0,d.jsx)(r.td,{children:"The class representing your model"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"class"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"fieldName"})}),(0,d.jsx)(r.td,{children:"The field (non-method) to be formatted"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"string"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"methodName"})}),(0,d.jsx)(r.td,{children:"The name of the method used to format the field"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"string"})})]})]})]}),"\n",(0,d.jsx)(r.hr,{}),"\n",(0,d.jsxs)(r.h2,{id:"formattedfieldmethod-decorator",children:[(0,d.jsx)(r.code,{children:"@FormattedFieldMethod"})," Decorator"]}),"\n",(0,d.jsxs)(r.p,{children:["The ",(0,d.jsx)(r.code,{children:"@FormattedFieldMethod"})," decorator is an alternative syntax to bind a model method to a field as a formatter."]}),"\n",(0,d.jsx)(r.h3,{id:"syntax-2",children:"Syntax"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-ts",children:'@FormattedFieldMethod<Model, "fieldName">("fieldName")\n'})}),"\n",(0,d.jsx)(r.h3,{id:"example-2",children:"Example"}),"\n",(0,d.jsx)(t,{title:"src/app/models/user.ts",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-typescript",children:'import { Model, Column, TableModel, FormattedFieldMethod } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @Column()\r\n  firstName: string;\r\n\r\n  @Column()\r\n  lastName: string;\r\n\r\n  fullName: string;\r\n\r\n  //highlight-start\r\n  @FormattedFieldMethod<Users, "fullName">("fullName")\r\n  protected getFullName() {\r\n    return `${this.firstName} ${this.lastName}`;\r\n  }\r\n  //highlight-end\r\n}\n'})})}),"\n",(0,d.jsx)(r.h3,{id:"parameters-2",children:"Parameters"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:(0,d.jsx)(r.strong,{children:"Parameter"})}),(0,d.jsx)(r.th,{children:(0,d.jsx)(r.strong,{children:"Description"})}),(0,d.jsx)(r.th,{children:(0,d.jsx)(r.strong,{children:"Type"})})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"Model"})}),(0,d.jsx)(r.td,{children:"The class representing your model"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"class"})})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"fieldName"})}),(0,d.jsx)(r.td,{children:"The field (non-method) to bind the formatting logic to"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:"string"})})]})]})]}),"\n",(0,d.jsx)(r.hr,{}),"\n",(0,d.jsxs)(r.h2,{id:"afterload-hook",children:[(0,d.jsx)(r.code,{children:"@AfterLoad()"})," Hook"]}),"\n",(0,d.jsxs)(r.p,{children:["For more complex scenarios, Alapa provides the ",(0,d.jsx)(r.code,{children:"@AfterLoad"})," lifecycle hook.\r\nThis method is called automatically after a model is loaded from the database."]}),"\n",(0,d.jsx)(r.h3,{id:"example-3",children:"Example"}),"\n",(0,d.jsx)(t,{title:"src/app/models/user.ts",children:(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-typescript",children:'import { Model, PrimaryColumn, Column, AfterLoad } from "alapa";\r\n\r\n@TableModel()\r\nexport class Users extends Model {\r\n  @PrimaryColumn()\r\n  id: number;\r\n\r\n  @Column()\r\n  profilePhoto: string;\r\n\r\n  //highlight-start\r\n  @AfterLoad()\r\n  protected afterLoad() {\r\n    this.profilePhoto = "https://example.com/images/" + this.profilePhoto;\r\n  }\r\n  //highlight-end\r\n}\n'})})}),"\n",(0,d.jsx)(r.hr,{}),"\n",(0,d.jsx)(r.p,{children:"This guide shows various ways you can format your model fields in Alapa,\r\noffering both declarative decorators and lifecycle methods for full flexibility."})]})}function h(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>s,x:()=>o});var n=t(6540);const d={},l=n.createContext(d);function s(e){const r=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),n.createElement(l.Provider,{value:r},e.children)}}}]);